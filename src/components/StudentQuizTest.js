/*
import React, { useState, useEffect } from 'react';
import nhost from '../services/nhost';

export default function StudentQuizTest() {
  const [quizzes, setQuizzes] = useState([]);
  const [answers, setAnswers] = useState({});
  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [studentName, setStudentName] = useState('');

  // L·∫•y danh s√°ch c√¢u h·ªèi
  const fetchQuizzes = async () => {
    const query = `
      query {
        quizzes(order_by: {created_at: desc}) {
          id
          question
          options
          correct_index
        }
      }
    `;

    try {
      const res = await nhost.graphql.request(query);
      console.log('üì• Fetch quizzes response:', res);

      if (res.error || res.errors) {
        console.error('‚ùå L·ªói GraphQL khi l·∫•y c√¢u h·ªèi:', res.error || res.errors);
        return;
      }

      if (!res.data || !res.data.quizzes) {
        console.warn('‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ server');
        return;
      }

      setQuizzes(res.data.quizzes);
    } catch (error) {
      console.error('‚ùå L·ªói khi g·ªçi fetchQuizzes:', error);
    }
  };

  useEffect(() => {
    fetchQuizzes();
  }, []);

  // N·ªôp b√†i
  const handleSubmit = async () => {
    if (Object.keys(answers).length !== quizzes.length) {
      alert('Vui l√≤ng tr·∫£ l·ªùi h·∫øt t·∫•t c·∫£ c√°c c√¢u h·ªèi!');
      return;
    }
    if (!studentName.trim()) {
      alert('Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n!');
      return;
    }

    setLoading(true);

    try {
      for (const quiz of quizzes) {
        const selected_index = answers[quiz.id];

        const mutation = `
          mutation InsertAnswer($quiz_id: uuid!, $student_id: String, $selected_index: Int!) {
            insert_quiz_answers_one(object: {
              quiz_id: $quiz_id,
              student_id: $student_id,
              selected_index: $selected_index
            }) {
              id
            }
          }
        `;

        const variables = {
          quiz_id: quiz.id,
          student_id: studentName.trim(),
          selected_index,
        };

        const res = await nhost.graphql.request(mutation, variables);
        console.log('üì§ Insert answer response:', res);

        if (res.error || res.errors) {
          console.error('‚ùå L·ªói khi l∆∞u c√¢u tr·∫£ l·ªùi:', res.error || res.errors);
          alert('C√≥ l·ªói khi n·ªôp b√†i, vui l√≤ng th·ª≠ l·∫°i!');
          setLoading(false);
          return;
        }
      }

      alert('‚úÖ N·ªôp b√†i th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ tham gia.');
      setSubmitted(true);
    } catch (error) {
      console.error('‚ùå L·ªói khi n·ªôp b√†i:', error);
      alert('C√≥ l·ªói khi n·ªôp b√†i, vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: 20, maxWidth: 700, margin: 'auto' }}>
      <h2>Tr·∫Øc nghi·ªám</h2>

      {!submitted && (
        <div style={{ marginBottom: 20 }}>
          <input
            placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n"
            value={studentName}
            onChange={(e) => setStudentName(e.target.value)}
            style={{ padding: 8, width: '100%', maxWidth: 400 }}
            disabled={loading}
          />
        </div>
      )}

      {!submitted && quizzes.length === 0 && <p>ƒêang t·∫£i c√¢u h·ªèi...</p>}

      {!submitted && quizzes.length > 0 && (
        <div>
          {quizzes.map((quiz, index) => (
            <div key={quiz.id} style={{ marginBottom: 20 }}>
              <p>
                <b>C√¢u {index + 1}:</b> {quiz.question}
              </p>
              {quiz.options.map((opt, i) => (
                <div key={i}>
                  <label>
                    <input
                      type="radio"
                      name={`answer-${quiz.id}`}
                      value={i}
                      checked={answers[quiz.id] === i}
                      onChange={() => setAnswers({ ...answers, [quiz.id]: i })}
                      disabled={loading || submitted}
                    />
                    {` ${opt.value}`}
                  </label>
                </div>
              ))}
            </div>
          ))}
          <button onClick={handleSubmit} disabled={loading}>
            {loading ? 'ƒêang n·ªôp...' : 'N·ªôp b√†i'}
          </button>
        </div>
      )}

      {submitted && (
        <div>
          <h3>B·∫°n ƒë√£ n·ªôp b√†i. C·∫£m ∆°n b·∫°n!</h3>
        </div>
      )}
    </div>
  );
} */

  // StudentQuizTest.jsx
import React, { useState, useEffect } from 'react';
import nhost from '../services/nhost';

export default function StudentQuizTest() {
  const [quizzes, setQuizzes] = useState([]);
  const [answers, setAnswers] = useState({});
  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [studentName, setStudentName] = useState('');

  const fetchQuizzes = async () => {
    const query = `
      query {
        quizzes(order_by: {created_at: desc}) {
          id
          question
          question_image
          options
        }
      }
    `;

    try {
      const res = await nhost.graphql.request(query);
      if (!res.data?.quizzes) return;
      setQuizzes(res.data.quizzes);
    } catch (error) {
      console.error('‚ùå L·ªói fetch:', error);
    }
  };

  useEffect(() => {
    fetchQuizzes();
  }, []);

  const handleSubmit = async () => {
    if (Object.keys(answers).length !== quizzes.length) {
      alert('Vui l√≤ng tr·∫£ l·ªùi h·∫øt t·∫•t c·∫£ c√°c c√¢u h·ªèi!');
      return;
    }
    if (!studentName.trim()) {
      alert('Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n!');
      return;
    }

    setLoading(true);

    try {
      for (const quiz of quizzes) {
        const selected_index = answers[quiz.id];
        const mutation = `
          mutation InsertAnswer($quiz_id: uuid!, $student_id: String, $selected_index: Int!) {
            insert_quiz_answers_one(object: {
              quiz_id: $quiz_id,
              student_id: $student_id,
              selected_index: $selected_index
            }) {
              id
            }
          }
        `;
        await nhost.graphql.request(mutation, {
          quiz_id: quiz.id,
          student_id: studentName.trim(),
          selected_index,
        });
      }
      alert('‚úÖ N·ªôp b√†i th√†nh c√¥ng!');
      setSubmitted(true);
    } catch (error) {
      console.error('‚ùå Submit error:', error);
      alert('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: 20, maxWidth: 700, margin: 'auto' }}>
      <h2>Tr·∫Øc nghi·ªám</h2>

      {!submitted && (
        <>
          <input
            placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n"
            value={studentName}
            onChange={(e) => setStudentName(e.target.value)}
            style={{ padding: 8, width: '100%', maxWidth: 400 }}
            disabled={loading}
          />
          <br /><br />
        </>
      )}

      {!submitted && quizzes.length === 0 && <p>ƒêang t·∫£i c√¢u h·ªèi...</p>}

      {!submitted && quizzes.length > 0 && (
        <div>
          {quizzes.map((quiz, index) => (
            <div key={quiz.id} style={{ marginBottom: 20 }}>
              <p><b>C√¢u {index + 1}:</b> {quiz.question}</p>
              {quiz.question_image && (
                <img src={quiz.question_image} alt="question" width="200" />
              )}
              {quiz.options.map((opt, i) => (
                <div key={i}>
                  <label>
                    <input
                      type="radio"
                      name={`answer-${quiz.id}`}
                      value={i}
                      checked={answers[quiz.id] === i}
                      onChange={() => setAnswers({ ...answers, [quiz.id]: i })}
                      disabled={loading || submitted}
                    />
                    {' '}{opt.value}
                  </label>
                  {opt.image && (
                    <div><img src={opt.image} alt={`ƒê√°p √°n ${i + 1}`} width="150" /></div>
                  )}
                </div>
              ))}
            </div>
          ))}
          <button onClick={handleSubmit} disabled={loading}>
            {loading ? 'ƒêang n·ªôp...' : 'N·ªôp b√†i'}
          </button>
        </div>
      )}

      {submitted && (
        <div>
          <h3>B·∫°n ƒë√£ n·ªôp b√†i. C·∫£m ∆°n b·∫°n!</h3>
        </div>
      )}
    </div>
  );
}

